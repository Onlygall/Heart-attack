# -*- coding: utf-8 -*-
"""Apipi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qf8bHt6ICWu6VTJErEztf8RdC4Weys3D
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from joblib import load
import pickle
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    classification_report,
    confusion_matrix,
    roc_auc_score,
    roc_curve
)

# ===============================
# Sidebar Navigasi
# ===============================
st.sidebar.title("Heart Attack")
page = st.sidebar.radio("Pilih Halaman", ["📄 Deskripsi Data", "🛠️ Modeling", "🔮 Prediksi"])

# ===============================
# Halaman: Deskripsi Data
# ===============================
if page == "📄 Deskripsi Data":
    st.title("🫀 Serangan Jantung di Indonesia")
    st.markdown("### Statistik, Penyebab, dan Upaya Pencegahan")

    # Data statis
    prevalensi_data = pd.DataFrame({
        "Tahun": [2013, 2018, 2023],
        "Prevalensi (%)": [0.5, 1.5, 0.85]
    })
    biaya_data = pd.DataFrame({
        "Tahun": [2014, 2016, 2018, 2023],
        "Biaya (Triliun Rp)": [4.4, 7.4, 9.3, 22.8]
    })
    usia_diagnosis_data = pd.DataFrame({
        "Tahun": [2013, 2023],
        "Usia Rata-rata (Tahun)": [48.5, 43.2]
    })
    kenaikan_usia_data = pd.DataFrame({
        "Kelompok Usia": ["< 45 Tahun", "≥ 46 Tahun"],
        "Kenaikan Kasus (%)": [66, 52]
    })
    provinsi_data = pd.DataFrame({
        "Provinsi": [
            "DI Yogyakarta", "Papua Tengah", "DKI Jakarta", "Jawa Barat", "Kalimantan Timur",
            "Bali", "Kalimantan Utara", "Kepulauan Riau", "Jawa Timur", "Sumatera Barat"
        ],
        "Prevalensi (%)": [1.67, 1.65, 1.56, 1.18, 1.08, 1.0, 0.95, 0.91, 0.88, 0.87]
    })

    # Visualisasi berbagai data
    def line_chart(df, x, y, color, label_y):
        fig, ax = plt.subplots(figsize=(5, 2.5))
        ax.plot(df[x], df[y], marker='o', color=color)
        ax.set_ylabel(label_y)
        ax.grid(True)
        return fig

    st.subheader("📈 Prevalensi Penyakit Jantung per Tahun")
    st.pyplot(line_chart(prevalensi_data, "Tahun", "Prevalensi (%)", 'blue', "Prevalensi (%)"))

    st.subheader("💰 Biaya Penanganan Penyakit Jantung oleh BPJS")
    st.pyplot(line_chart(biaya_data, "Tahun", "Biaya (Triliun Rp)", 'red', "Biaya (Triliun Rp)"))

    st.subheader("👶 Usia Rata-rata Diagnosis Pertama")
    fig3, ax3 = plt.subplots(figsize=(5, 2.5))
    ax3.bar(usia_diagnosis_data["Tahun"], usia_diagnosis_data["Usia Rata-rata (Tahun)"], color='green')
    ax3.set_ylabel("Usia (Tahun)")
    ax3.grid(True)
    st.pyplot(fig3)

    st.subheader("📊 Kenaikan Kasus Berdasarkan Kelompok Usia")
    fig4, ax4 = plt.subplots(figsize=(5, 2.5))
    ax4.bar(kenaikan_usia_data["Kelompok Usia"], kenaikan_usia_data["Kenaikan Kasus (%)"], color='purple')
    ax4.set_ylabel("Kenaikan Kasus (%)")
    ax4.grid(True)
    st.pyplot(fig4)

    st.subheader("🏥 10 Provinsi dengan Prevalensi Tertinggi (2023)")
    fig5, ax5 = plt.subplots(figsize=(5, 2.5))
    ax5.barh(provinsi_data["Provinsi"], provinsi_data["Prevalensi (%)"], color='orange')
    ax5.set_xlabel("Prevalensi (%)")
    ax5.invert_yaxis()
    ax5.grid(True)
    st.pyplot(fig5)

    st.markdown("---")
    st.caption("Data bersumber dari Kemenkes, BPJS Kesehatan, dan Riskesdas.")

    # Faktor risiko dan pencegahan
    st.markdown("### ⚠️ Faktor Risiko Utama")
    st.markdown("""
    - **Merokok**: Pria 74,3%, Wanita 6,5%
    - **Obesitas**: 10,5% (2013) → 21,8% (2018)
    - **Gaya Hidup Tidak Sehat**
    - **Stres dan Tekanan Kerja**
    """)

    st.markdown("### 🩺 Upaya Pencegahan dan Penanggulangan")
    st.markdown("*Sumber: [kemkes.go.id](https://kemkes.go.id)*")
    st.markdown("""
    - **Edukasi Masyarakat**
    - **Promosi Aktivitas Fisik**
    - **Penguatan Layanan Primer**
    """)

    # Eksplorasi Data
    st.markdown("### 📊 Eksplorasi Data: Heart Attack Prediction Indonesia")
    df = pd.read_csv('https://raw.githubusercontent.com/Onlygall/Heart-attack/main/heart_attack_prediction_indonesia.csv')
    df['alcohol_consumption'] = df['alcohol_consumption'].fillna("None")

    st.write("Jumlah baris dan kolom:", df.shape)
    st.dataframe(df.head(10))

    st.subheader("📐 Statistik Deskriptif")
    st.dataframe(df.describe())

    st.subheader("📈 Distribusi Fitur Numerik")
    num_cols = df.select_dtypes(include='number').columns.tolist()
    fig, axs = plt.subplots(len(num_cols) // 3 + 1, 3, figsize=(12, 4 * (len(num_cols) // 3 + 1)))
    axs = axs.flatten()

    for i, col in enumerate(num_cols):
        sns.histplot(df[col], kde=True, ax=axs[i], color='skyblue')
        axs[i].set_title(f"Distribusi {col}")
    for j in range(i + 1, len(axs)):
        fig.delaxes(axs[j])
    plt.tight_layout()
    st.pyplot(fig)

    st.subheader("🧪 Deteksi Outlier dengan Boxplot")
    fig2, ax2 = plt.subplots(figsize=(12, 5))
    sns.boxplot(data=df[num_cols], ax=ax2)
    ax2.set_title("Boxplot Fitur Numerik")
    st.pyplot(fig2)

    st.subheader("🔗 Korelasi antar Variabel")
    corr = df[num_cols].corr()
    fig3, ax3 = plt.subplots(figsize=(12, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', ax=ax3)
    ax3.set_title("Matriks Korelasi")
    st.pyplot(fig3)

# ===============================
# Halaman: Modeling
# ===============================
elif page == "🛠️ Modeling":
    st.title("🛠️ Modeling Data")
    st.markdown("### Evaluasi Model: Heart Attack Prediction")


    model = load("heart_attack_prediction_pipeline.joblib")

    X_test = pd.read_csv("X_test.csv")
    y_test = pd.read_csv("y_test.csv")

    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]

    st.subheader("📊 Evaluasi Model")
    accuracy = (y_pred == y_test.values.ravel()).mean()
    auc = roc_auc_score(y_test, y_proba)

    st.metric("Akurasi", f"{accuracy:.2%}")
    st.metric("AUC Score", f"{auc:.3f}")

    st.subheader("📋 Classification Report")
    report_df = pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose()
    st.dataframe(report_df.style.format("{:.2f}"))

    st.subheader("📌 Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=[0, 1], yticklabels=[0, 1])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    st.pyplot(fig)

    st.subheader("📉 ROC Curve")
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    fig2, ax2 = plt.subplots()
    ax2.plot(fpr, tpr, label=f"AUC = {auc:.2f}")
    ax2.plot([0, 1], [0, 1], "k--")
    ax2.set_xlabel("False Positive Rate")
    ax2.set_ylabel("True Positive Rate")
    ax2.set_title("ROC Curve")
    ax2.legend()
    st.pyplot(fig2)

    st.subheader("📌 Feature Importance")
    try:
        importances = model.named_steps["classifier"].feature_importances_
        features = model.named_steps["preprocessor"].get_feature_names_out()
        imp_df = pd.DataFrame({"Feature": features, "Importance": importances}).sort_values("Importance", ascending=False)

        fig3, ax3 = plt.subplots()
        sns.barplot(x="Importance", y="Feature", data=imp_df.head(10), ax=ax3)
        st.pyplot(fig3)
    except:
        st.info("Feature importance tidak tersedia atau model tidak mendukung.")

# ===============================
# Halaman: Prediksi
# ===============================
elif page == "🔮 Prediksi":
    st.title("🔮 Prediksi Heart Attack")
    st.markdown("Masukkan data pasien untuk prediksi risiko serangan jantung.")

    model = load("heart_attack_prediction_pipeline.joblib")

    # Input Form
    age = st.number_input("Umur", min_value=1, max_value=120, value=30)
    gender = st.selectbox("Jenis Kelamin", ["Laki-laki", "Perempuan"])
    gender_encoded = 1 if gender == "Laki-laki" else 0

    cholesterol_level = st.number_input("Total Kolesterol", min_value=0.0)
    cholesterol_ldl = st.number_input("LDL Kolesterol", min_value=0.0)
    cholesterol_hdl = st.number_input("HDL Kolesterol", min_value=0.0)
    triglycerides = st.number_input("Trigliserida", min_value=0.0)
    blood_pressure_systolic = st.number_input("Tekanan Darah Sistolik", min_value=0)
    blood_pressure_diastolic = st.number_input("Tekanan Darah Diastolik", min_value=0)
    hypertension = st.selectbox("Hipertensi", [0, 1])
    diabetes = st.selectbox("Diabetes", [0, 1])
    smoking_status = st.selectbox("Merokok", [0, 1])
    obesity = st.selectbox("Obesitas", [0, 1])
    waist_circumference = st.number_input("Lingkar Pinggang (cm)", min_value=0.0)
    physical_activity = st.number_input("Aktivitas Fisik (jam/minggu)", min_value=0.0)
    previous_heart_disease = st.selectbox("Riwayat Penyakit Jantung", [0, 1])
    family_history = st.selectbox("Riwayat Keluarga", [0, 1])
    alcohol_consumption = st.selectbox("Konsumsi Alkohol", [0, 1])
    fasting_blood_sugar = st.number_input("Gula Darah Puasa (mg/dL)", min_value=0.0)
    EKG_results = st.selectbox("Hasil EKG", [0, 1, 2])
    medication_usage = st.selectbox("Penggunaan Obat", [0, 1])
    dietary_habits = st.selectbox("Kebiasaan Diet (1=Baik, 0=Buruk)", [0, 1])
    stress_level = st.slider("Tingkat Stres (1=rendah, 10=tinggi)", min_value=1, max_value=10)
    sleep_hours = st.number_input("Jam Tidur per Hari", min_value=0.0, max_value=24.0)
    air_pollution_exposure = st.number_input("Paparan Polusi Udara (PM2.5 μg/m³)", min_value=0.0)

    if st.button("Prediksi"):
        input_data = np.array([[
            age, gender_encoded, cholesterol_level, cholesterol_ldl, cholesterol_hdl,
            triglycerides, blood_pressure_systolic, blood_pressure_diastolic,
            hypertension, diabetes, smoking_status, obesity,
            waist_circumference, physical_activity, previous_heart_disease,
            family_history, alcohol_consumption, fasting_blood_sugar,
            EKG_results, medication_usage, dietary_habits,
            stress_level, sleep_hours, air_pollution_exposure
        ]])

        prediction = model.predict(input_data)
        result = "💔 Berisiko Serangan Jantung" if prediction[0] == 1 else "❤️ Tidak Berisiko"
        st.subheader("Hasil Prediksi:")
        st.success(result)
