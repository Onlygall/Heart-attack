# -*- coding: utf-8 -*-
"""90%.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qEF8T7ZjSDWkFuwr2trwiAGt0gsvYvjj
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import joblib
from joblib import load
import pickle
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    classification_report,
    confusion_matrix,
    roc_auc_score,
    roc_curve
)


url = 'https://raw.githubusercontent.com/Onlygall/Heart-attack/main/heart_attack_prediction_indonesia.csv'
data = pd.read_csv(url)
data['alcohol_consumption'] = data['alcohol_consumption'].fillna("None")



# Daftar halaman
pages = [
    "📰 Informasi",
    "📊 Tentang Dataset",
    "⚙️ Modeling",
    "🔮 Prediksi",
    "👥 About"
]

# Sidebar
st.sidebar.title("Heart Attack")
page = st.sidebar.selectbox("Pilih Halaman", pages)

# ===============================
# Halaman: Deskripsi Data
# ===============================
if page == "📰 Informasi":
    st.title("💓 Serangan Jantung Di Indonesia")
    st.write("""
    Serangan jantung merupakan salah satu penyebab kematian utama di Indonesia. Penyakit ini terjadi ketika aliran darah ke bagian jantung tersumbat, biasanya karena penumpukan lemak, kolesterol, dan zat lain.
    Menurut data Kementerian Kesehatan dan WHO, prevalensi penyakit jantung terus meningkat dari tahun ke tahun.

    Berikut adalah data dan informasi terkait tren serangan jantung di Indonesia.
    """)

    # Data statis
    prevalensi_data = pd.DataFrame({
        "Tahun": [2013, 2018, 2023],
        "Prevalensi (%)": [0.5, 1.5, 0.85]
    })
    biaya_data = pd.DataFrame({
        "Tahun": [2014, 2016, 2018, 2023],
        "Biaya (Triliun Rp)": [4.4, 7.4, 9.3, 22.8]
    })
    usia_diagnosis_data = pd.DataFrame({
        "Tahun": [2013, 2023],
        "Usia Rata-rata (Tahun)": [48.5, 43.2]
    })
    kenaikan_usia_data = pd.DataFrame({
        "Kelompok Usia": ["< 45 Tahun", "≥ 46 Tahun"],
        "Kenaikan Kasus (%)": [66, 52]
    })
    provinsi_data = pd.DataFrame({
        "Provinsi": [
            "DI Yogyakarta", "Papua Tengah", "DKI Jakarta", "Jawa Barat", "Kalimantan Timur",
            "Bali", "Kalimantan Utara", "Kepulauan Riau", "Jawa Timur", "Sumatera Barat"
        ],
        "Prevalensi (%)": [1.67, 1.65, 1.56, 1.18, 1.08, 1.0, 0.95, 0.91, 0.88, 0.87]
    })


    st.subheader("📈 Prevalensi Penyakit Jantung per Tahun")
    st.markdown("""
    - **2013**: Prevalensi penyakit jantung sebesar **0,5%** dari populasi.
    - **2018**: Meningkat menjadi **1,5%**, setara dengan lebih dari **2,78 juta** penderita.
    - **2023**: Berdasarkan Survei Kesehatan Indonesia, prevalensi mencapai **0,85%**, dengan jumlah penderita sekitar **2,29 juta orang** dari total **212,6 juta** penduduk berusia 15 tahun ke atas.
    """)
    fig1 = px.line(prevalensi_data, x="Tahun", y="Prevalensi (%)", markers=True, line_shape="linear")
    fig1.update_layout(margin=dict(l=20, r=20, t=20, b=20))
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("💰 Biaya Penanganan Penyakit Jantung oleh BPJS")
    st.markdown("""
    - **2014**: BPJS Kesehatan mengeluarkan dana sebesar Rp4,4 triliun untuk penanganan penyakit jantung.
    - **2016**: Meningkat menjadi Rp7,4 triliun.
    - **2018**: Naik lagi menjadi Rp9,3 triliun.
    - **2023**: Total pembiayaan untuk penyakit jantung dan stroke mencapai Rp22,8 triliun, menjadikannya beban biaya terbesar dalam program Jaminan Kesehatan Nasional.
    """)
    fig2 = px.line(biaya_data, x="Tahun", y="Biaya (Triliun Rp)", markers=True, line_shape="linear", color_discrete_sequence=["red"])
    st.plotly_chart(fig2, use_container_width=True)

    st.subheader("🧓 Usia Rata-rata Diagnosis Pertama")
    st.markdown("""
    Rata-rata usia diagnosis pertama penyakit jantung menurun dari 48,5 tahun pada 2013 menjadi 43,2 tahun pada 2023.
    """)
    fig3 = px.bar(usia_diagnosis_data, x="Tahun", y="Usia Rata-rata (Tahun)", color_discrete_sequence=["green"])
    st.plotly_chart(fig3, use_container_width=True)

    st.subheader("📊 Kenaikan Kasus Berdasarkan Kelompok Usia")
    st.markdown("""
    Kasus penyakit jantung pada usia di bawah 45 tahun meningkat sebesar 66% antara 2020–2023, lebih cepat dibandingkan kelompok usia di atas 46 tahun yang meningkat 52%.
    """)
    fig4 = px.bar(kenaikan_usia_data, x="Kelompok Usia", y="Kenaikan Kasus (%)", color_discrete_sequence=["purple"])
    st.plotly_chart(fig4, use_container_width=True)

    st.subheader("🏥 10 Provinsi dengan Prevalensi Tertinggi (2023)")
    st.markdown("""
    Berdasarkan data Survei Kesehatan Indonesia 2023, berikut adalah 10 provinsi dengan prevalensi penyakit jantung tertinggi:
    """)
    fig5 = px.bar(provinsi_data, x="Prevalensi (%)", y="Provinsi", orientation='h', color_discrete_sequence=["orange"])
    fig5.update_layout(yaxis=dict(autorange="reversed"))
    st.plotly_chart(fig5, use_container_width=True)

    st.markdown("---")
    st.caption("Data bersumber dari Kemenkes, BPJS Kesehatan, dan Riskesdas.")

    # Faktor risiko dan pencegahan
    st.markdown("### ⚠️ Faktor Risiko Utama")
    st.markdown("""
    - **Merokok**: Prevalensi merokok di kalangan pria dewasa mencapai **74,3%**, dan **6,5%** di kalangan wanita.
    - **Obesitas**: Prevalensi obesitas meningkat dari **10,5%** pada tahun **2013** menjadi **21,8%** pada tahun **2018**.
    - **Gaya Hidup Tidak Sehat**: Pola makan tinggi lemak, gula, dan garam, serta kurangnya aktivitas fisik.
    - **Stres dan Tekanan Kerja**: Banyak individu usia **30–40 tahun** mengalami tekanan tinggi dari pekerjaan dan tanggung jawab keluarga.
    """)

    st.markdown("### 🩺 Upaya Pencegahan dan Penanggulangan")
    st.markdown("Kementerian Kesehatan RI telah melakukan berbagai upaya untuk menanggulangi peningkatan penyakit jantung, antara lain:")
    st.markdown("*Sumber: [kemkes.go.id](https://kemkes.go.id)*")
    st.markdown("""
    - **Edukasi Masyarakat**: Meningkatkan kesadaran tentang risiko penyakit jantung dan pentingnya gaya hidup sehat melalui program edukasi di sekolah dan komunitas.
    - **Promosi Aktivitas Fisik**: Mendorong masyarakat untuk berolahraga secara teratur.
    - **Penguatan Layanan Primer**: Meningkatkan kapasitas dan kapabilitas layanan kesehatan primer, termasuk pembangunan **Puskesmas** dan penyediaan **obat esensial**.
    """)


# ===============================
# Halaman: Tentang Dataset
# ===============================
elif page == "📊 Tentang Dataset":
    st.title("📊 Tentang Dataset")
    st.markdown("""
    Dataset ini menyajikan profil kesehatan individu di Indonesia secara detail, dengan fokus pada prediksi serangan jantung.
    Data mencakup faktor demografis, klinis, gaya hidup, dan lingkungan yang berperan terhadap risiko penyakit kardiovaskular.

    Indonesia mengalami peningkatan kasus penyakit jantung, sehingga prediksi dan pencegahan dini menjadi sangat penting.
    Dataset ini dirancang untuk mendukung model pembelajaran mesin, riset kesehatan masyarakat, dan studi epidemiologi.

    ---

    🔍 **Definisi Variabel (Deskripsi Lengkap)**

    ### 📂 Demografi
    - `age` (int): Usia individu (25–90 tahun)
    - `gender` (str): Jenis kelamin (Laki-laki, Perempuan)
    - `region` (str): Wilayah tempat tinggal (Perkotaan, Pedesaan)
    - `income_level` (str): Tingkat pendapatan (Rendah, Menengah, Tinggi)

    ### 🏥 Faktor Risiko Klinis
    - `hypertension` (int): Tekanan darah tinggi (1 = Ya, 0 = Tidak)
    - `diabetes` (int): Riwayat diabetes (1 = Ya, 0 = Tidak)
    - `cholesterol_level` (int): Kadar kolesterol total (mg/dL)
    - `obesity` (int): Obesitas (BMI > 30) (1 = Ya, 0 = Tidak)
    - `waist_circumference` (int): Lingkar pinggang dalam cm
    - `family_history` (int): Riwayat keluarga penyakit jantung (1 = Ya, 0 = Tidak)

    ### 🚬 Gaya Hidup & Perilaku
    - `smoking_status` (str): Status merokok (Tidak Pernah, Dulu, Sekarang)
    - `alcohol_consumption` (str): Konsumsi alkohol (Tidak, Sedang, Tinggi)
    - `physical_activity` (str): Aktivitas fisik (Rendah, Sedang, Tinggi)
    - `dietary_habits` (str): Pola makan (Sehat, Tidak Sehat)

    ### 🌍 Faktor Lingkungan & Sosial
    - `air_pollution_exposure` (str): Paparan polusi (Rendah, Sedang, Tinggi)
    - `stress_level` (str): Tingkat stres (Rendah, Sedang, Tinggi)
    - `sleep_hours` (float): Rata-rata jam tidur per malam (3–9 jam)

    ### 🧪 Pemeriksaan Medis & Sistem Kesehatan
    - `blood_pressure_systolic` (int): Tekanan darah sistolik (mmHg)
    - `blood_pressure_diastolic` (int): Tekanan darah diastolik (mmHg)
    - `fasting_blood_sugar` (int): Kadar gula darah puasa (mg/dL)
    - `cholesterol_hdl` (int): Kadar kolesterol HDL (mg/dL)
    - `cholesterol_ldl` (int): Kadar kolesterol LDL (mg/dL)
    - `triglycerides` (int): Kadar trigliserida (mg/dL)
    - `EKG_results` (str): Hasil elektrokardiogram (Normal, Abnormal)
    - `previous_heart_disease` (int): Riwayat penyakit jantung sebelumnya (1 = Ya, 0 = Tidak)
    - `medication_usage` (int): Sedang mengonsumsi obat jantung (1 = Ya, 0 = Tidak)
    - `participated_in_free_screening` (int): Pernah ikut program skrining gratis (1 = Ya, 0 = Tidak)

    ### 🎯 Variabel Target
    - `heart_attack` (int): Kejadian serangan jantung (1 = Ya, 0 = Tidak)
    """)
    st.markdown("---")
    st.caption("*Sumber: https://www.kaggle.com/datasets/ankushpanday2/heart-attack-prediction-in-indonesia*")


    st.subheader("🔍 Eksplorasi Dataset")
    st.write("Jumlah baris dan kolom:", data.shape)
    st.write("Menampilkan 10 Data Pertama:")
    st.dataframe(data.head(10))

    st.subheader("📐 Statistik Deskriptif")
    st.dataframe(data.describe())

    # Distribusi Fitur Numerik
    st.subheader("📈 Distribusi Fitur Numerik")
    num_cols = data.select_dtypes(include='number').columns.tolist()
    fig, axs = plt.subplots(len(num_cols) // 3 + 1, 3, figsize=(12, 4 * (len(num_cols) // 3 + 1)))
    axs = axs.flatten()

    for i, col in enumerate(num_cols):
        sns.histplot(data[col], kde=True, ax=axs[i], color='skyblue')
        axs[i].set_title(f"Distribusi {col}")
    for j in range(i + 1, len(axs)):
        fig.delaxes(axs[j])
    plt.tight_layout()
    st.pyplot(fig)

    st.markdown("""
    - Histogram + kurva KDE untuk deteksi pola distribusi data.
    """)

    # Boxplot Outlier
    st.subheader("🧪 Deteksi Outlier dengan Boxplot")
    fig2, ax2 = plt.subplots(figsize=(12, 5))
    sns.boxplot(data=data[num_cols], ax=ax2)
    ax2.set_title("Boxplot Fitur Numerik")
    st.pyplot(fig2)

    # Korelasi
    st.subheader("🔗 Korelasi antar Variabel")
    corr = data[num_cols].corr()
    fig3, ax3 = plt.subplots(figsize=(12, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', ax=ax3)
    ax3.set_title("Matriks Korelasi")
    st.pyplot(fig3)




# ===============================
# Halaman: Modeling
# ===============================
elif page == "⚙️ Modeling":
    st.title("🛠️ Modeling Data")

    model = load("heart_attack_prediction_pipeline.joblib")

    X_test = pd.read_csv("X_test.csv")
    y_test = pd.read_csv("y_test.csv")

    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]

    st.write("""
    Model ini digunakan untuk **memprediksi kemungkinan seseorang mengalami serangan jantung** berdasarkan berbagai faktor risiko medis dan gaya hidup. Juga mengevaluasi model prediksi serangan jantung.
    """)

    st.subheader("🧩 Fitur yang Digunakan")
    st.markdown("""
    Model menggunakan **24 fitur**:
    - **Demografis & Gaya Hidup**: `age`, `gender`, `smoking_status`, `alcohol_consumption`, `physical_activity`, `dietary_habits`, `stress_level`, `sleep_hours`, `air_pollution_exposure`
    - **Medis & Pengukuran**: `cholesterol_level`, `cholesterol_ldl`, `cholesterol_hdl`, `triglycerides`, `blood_pressure_systolic`, `blood_pressure_diastolic`, `waist_circumference`, `fasting_blood_sugar`, `EKG_results`
    - **Riwayat & Kondisi**: `hypertension`, `diabetes`, `obesity`, `previous_heart_disease`, `family_history`, `medication_usage`
    """)

    st.subheader("🔄 Preprocessing")
    st.markdown("""
    - **Encoding**: LabelEncoder digunakan untuk fitur kategorikal.
    - **Scaling**: StandardScaler digunakan untuk normalisasi.
    - **Split Data**: 70% data latih, 30% data uji dengan stratifikasi.
    """)

    st.subheader("🤖 Model XGBoost")
    st.markdown("""
    Model yang digunakan adalah `XGBClassifier` dengan parameter berikut:
    - `n_estimators=300`, `max_depth=6`, `learning_rate=0.1`
    - `eval_metric='logloss'`, `use_label_encoder=False`, `random_state=123`
    """)

    st.subheader("📊 Evaluasi Model")
    accuracy = (y_pred == y_test.values.ravel()).mean()
    auc = roc_auc_score(y_test, y_proba)

    st.metric("Akurasi", f"{accuracy:.2%}")
    st.metric("AUC Score", f"{auc:.3f}")

    st.markdown(f"""
    - **AUC Score** sebesar **{auc:.3f}** menunjukkan kemampuan model membedakan kelas.
    """)

    st.write("**📋 Classification Report**")
    report_df = pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose()
    st.dataframe(report_df.style.format("{:.2f}"))

    st.write("**📌 Confusion Matrix**")
    cm = confusion_matrix(y_test, y_pred)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=[0, 1], yticklabels=[0, 1])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    st.pyplot(fig)

    st.markdown("""
    - **True Positive (TP)** dan **True Negative (TN)** menunjukkan prediksi yang benar.
    - **False Positive (FP)** dan **False Negative (FN)** menunjukkan kesalahan model.
    """)

    st.write("**📉 ROC Curve**")
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    fig2, ax2 = plt.subplots()
    ax2.plot(fpr, tpr, label=f"AUC = {auc:.2f}")
    ax2.plot([0, 1], [0, 1], "k--")
    ax2.set_xlabel("False Positive Rate")
    ax2.set_ylabel("True Positive Rate")
    ax2.set_title("ROC Curve")
    ax2.legend()
    st.pyplot(fig2)

    st.markdown(f"""
    - **ROC Curve** menunjukkan trade-off antara *True Positive Rate* dan *False Positive Rate*.""")

    # Feature Importance
    xgb_model = model.named_steps['clf']
    importances = xgb_model.feature_importances_
    importance_df = pd.DataFrame({
        'Feature': X_test.columns,
        'Importance': importances
    }).sort_values(by='Importance', ascending=False)

    st.subheader("🔥 Feature Importance")
    fig_imp, ax_imp = plt.subplots(figsize=(8, 6))
    sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis', ax=ax_imp)
    ax_imp.set_title("Feature Importance (XGBoost)")
    st.pyplot(fig_imp)

    st.markdown("""
    Model **XGBoost** memiliki kemampuan untuk mengevaluasi seberapa penting setiap fitur terhadap proses prediksi.
    Hal ini dilakukan melalui atribut `.feature_importances_`.

    Bagaimana Cara Kerjanya?
    - Nilai **feature importance** dihitung berdasarkan **frekuensi** dan **kualitas pemisahan (split)** yang dilakukan oleh fitur tersebut di seluruh pohon keputusan yang dibentuk oleh model.
    - Fitur yang lebih sering digunakan untuk membuat pemisahan yang "bagus" akan mendapatkan skor importance yang lebih tinggi.

    Interpretasi:
    - Semakin **tinggi nilai importance**, semakin besar **pengaruh fitur tersebut terhadap hasil prediksi**.
    - Informasi ini sangat berguna untuk memahami model, meningkatkan interpretabilitas, serta membantu dalam proses **feature selection** (pemilihan fitur yang paling relevan).

    """)



    # ===============================
    # Klastering Risiko Serangan Jantung
    # ===============================
    st.subheader("📌 Klastering Risiko Serangan Jantung")

    df_all = pd.read_csv("https://raw.githubusercontent.com/Onlygall/Heart-attack/main/heart_attack_prediction_indonesia.csv")
    df_all['alcohol_consumption'] = df_all['alcohol_consumption'].fillna("None")

    selected_features = X_test.columns.tolist()
    X_cluster = df_all[selected_features].copy()


    numerical_cols = X_cluster.select_dtypes(include=np.number).columns.tolist()
    categorical_cols = X_cluster.select_dtypes(include='object').columns.tolist()

    preprocessor_cluster = ColumnTransformer([
        ("num", StandardScaler(), numerical_cols),
        ("cat", OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ])

    X_cluster_processed = preprocessor_cluster.fit_transform(X_cluster)

    kmeans = KMeans(n_clusters=3, random_state=123, n_init=10)
    cluster_labels = kmeans.fit_predict(X_cluster_processed)

    df_clustered = df_all[selected_features].copy()
    df_clustered["cluster"] = cluster_labels
    df_clustered['heart_attack'] = df_all['heart_attack']

    risk_summary = df_clustered.groupby("cluster")["heart_attack"].agg(["count", "sum", "mean"])
    risk_summary["risk_label"] = pd.qcut(risk_summary["mean"], q=3, labels=["Rendah", "Sedang", "Tinggi"])

    cluster_risk_map = risk_summary["risk_label"].to_dict()
    df_clustered["risk_level"] = df_clustered["cluster"].map(cluster_risk_map)

    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_cluster_processed)

    fig_pca, ax_pca = plt.subplots(figsize=(8, 6))
    sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1],
                    hue=df_clustered["risk_level"],
                    palette={"Rendah": "green", "Sedang": "orange", "Tinggi": "red"}, ax=ax_pca)
    ax_pca.set_title("Klaster Risiko Serangan Jantung (KMeans)")
    ax_pca.set_xlabel("PCA 1")
    ax_pca.set_ylabel("PCA 2")
    st.pyplot(fig_pca)
    st.markdown("""
    Setelah dilakukan klastering menggunakan algoritma **KMeans**, data pasien terbagi menjadi **3 kelompok utama** berdasarkan kemiripan karakteristik kesehatannya. Masing-masing klaster memiliki **tingkat risiko berbeda terhadap serangan jantung** berdasarkan proporsi kasus `heart_attack` di dalamnya.

    Penjelasan Tiap Klaster:

    - **Klaster Risiko Tinggi**
      - Memiliki proporsi tertinggi pasien dengan riwayat serangan jantung.
      - Umumnya ditandai dengan fitur-fitur seperti:
        - **Kolesterol LDL tinggi**
        - **Hipertensi**
        - **Riwayat penyakit jantung sebelumnya**
        - **Gaya hidup tidak sehat** (merokok, kurang olahraga, dll)
      - Disarankan mendapat perhatian dan intervensi medis lebih lanjut.

    - **Klaster Risiko Sedang**
      - Menunjukkan tingkat serangan jantung yang moderat.
      - Perlu pemantauan, namun belum menunjukkan ciri-ciri klinis separah klaster risiko tinggi.

    - **Klaster Risiko Rendah**
      - Paling sedikit kasus serangan jantung.
      - Umumnya memiliki pola hidup lebih sehat dan hasil medis yang lebih baik.
    """)
    st.write("Distribusi Risiko per Klaster:")
    st.dataframe(risk_summary.style.format({"mean": "{:.2%}"}))

    # =============================
    # Lifestyle Clustering Section
    # =============================
    st.subheader("🧬 Klastering Gaya Hidup")

    lifestyle_features = [
        "smoking_status", "alcohol_consumption", "physical_activity",
        "dietary_habits", "sleep_hours", "obesity", "stress_level", "air_pollution_exposure"
    ]

    ndf = df_all[selected_features]
    df_lifestyle = ndf[lifestyle_features].copy()

    # 2. Label encoding untuk kolom kategorikal
    categorical_cols = ["smoking_status", "alcohol_consumption", "physical_activity", "dietary_habits", "stress_level", "air_pollution_exposure"]
    for col in categorical_cols:
        df_lifestyle[col] = LabelEncoder().fit_transform(df_lifestyle[col])

    # 3. Fitur biner untuk tidur cukup
    df_lifestyle['tidur_cukup'] = (df_lifestyle['sleep_hours'] >= 6).astype(int)
    df_lifestyle.drop(columns='sleep_hours', inplace=True)

    # 4. Normalisasi
    scaler = StandardScaler()
    df_scaled = scaler.fit_transform(df_lifestyle)

    # 5. KMeans Klastering
    kmeans = KMeans(n_clusters=3, random_state=123, n_init=10)
    ndf['lifestyle_cluster'] = kmeans.fit_predict(df_scaled)

    # 6. Hitung rata-rata tiap fitur per klaster
    cluster_means = df_lifestyle.copy()
    cluster_means['cluster'] = ndf['lifestyle_cluster']
    mean_per_cluster = cluster_means.groupby('cluster').mean()

    # 7. Skor tidak sehat berdasarkan fitur negatif
    mean_per_cluster['unhealthy_score'] = (
        (cluster_means[['physical_activity']].max().max() - mean_per_cluster['physical_activity']) +  # pasif = buruk
        mean_per_cluster['smoking_status'] +
        mean_per_cluster['alcohol_consumption'] +
        (cluster_means[['dietary_habits']].max().max() - mean_per_cluster['dietary_habits']) +  # buruk = skor tinggi
        (1 - mean_per_cluster['tidur_cukup']) +
        mean_per_cluster['obesity'] +
        mean_per_cluster['stress_level'] +
        mean_per_cluster['air_pollution_exposure']
    )

    # 8. Ranking klaster
    ranked_clusters = mean_per_cluster['unhealthy_score'].sort_values(ascending=False).index.tolist()
    cluster_labels = {cluster: label for cluster, label in zip(ranked_clusters, ['Tidak Sehat', 'Sedang', 'Sehat'])}
    ndf['lifestyle_category'] = ndf['lifestyle_cluster'].map(cluster_labels)

    # 1. Lakukan PCA
    pca = PCA(n_components=2)
    lifestyle_2d = pca.fit_transform(df_scaled)

    # 2. Tambahkan hasil PCA ke DataFrame
    ndf['pca_1'] = lifestyle_2d[:, 0]
    ndf['pca_2'] = lifestyle_2d[:, 1]

    # 3. Visualisasi dengan subplot dan Streamlit
    fig_pca, ax_pca = plt.subplots(figsize=(10, 6))
    sns.scatterplot(
        data=ndf,
        x='pca_1', y='pca_2',
        hue='lifestyle_category',
        palette={'Sehat': 'green', 'Sedang': 'orange', 'Tidak Sehat': 'red'},
        alpha=0.6,
        ax=ax_pca
    )

    ax_pca.set_title("Visualisasi PCA Berdasarkan Kategori Lifestyle")
    ax_pca.set_xlabel("PCA Komponen 1")
    ax_pca.set_ylabel("PCA Komponen 2")
    ax_pca.legend(title='Kategori Lifestyle')
    st.pyplot(fig_pca)


    # Ringkasan distribusi kategori
    summary = ndf['lifestyle_category'].value_counts()
    st.write("""
    Klastering ini mengelompokkan individu berdasarkan kebiasaan hidup mereka, seperti merokok, pola makan, aktivitas fisik, stres, tidur, dan lainnya. Hasil klaster ini dibagi menjadi tiga kategori:

    Kategori Klaster:
    - 🟥 **Tidak Sehat**
      Individu dalam kelompok ini menunjukkan kebiasaan negatif seperti:
      - Merokok dan konsumsi alkohol tinggi
      - Kurangnya aktivitas fisik
      - Pola makan buruk
      - Tingkat stres tinggi
      - Kurang tidur
      - Obesitas
      - Paparan polusi tinggi

    - 🟧 **Sedang**
     Kelompok ini memiliki kebiasaan hidup campuran — tidak sepenuhnya sehat, tapi juga tidak buruk. Bisa dianggap sebagai target potensial untuk perbaikan gaya hidup ringan.

    - 🟩 **Sehat**
      Individu dalam kelompok ini cenderung memiliki gaya hidup yang mendukung kesehatan, seperti:
      - Rutin berolahraga
      - Tidur cukup
      - Pola makan baik
      - Minim stres dan jarang merokok atau minum alkohol
    """)


    st.write("Distribusi Kategori Gaya Hidup:")
    st.write(summary)

    # ===============================
    # Klaster Gejala & Kondisi Klinis
    # ===============================

    # Define clinical features
    clinical_features = [
        'cholesterol_level', 'cholesterol_ldl', 'cholesterol_hdl', 'triglycerides',
        'blood_pressure_systolic', 'blood_pressure_diastolic',
        'hypertension', 'diabetes', 'fasting_blood_sugar', 'EKG_results',
        'medication_usage', 'previous_heart_disease', 'family_history'
    ]

    # Ambil subset
    X_clinical = ndf[clinical_features]

    # Tentukan kolom kategorikal dan numerik
    cat_clinical = ['EKG_results']
    num_clinical = [col for col in clinical_features if col not in cat_clinical]

    # Preprocessing pipeline
    clinical_preprocessor = ColumnTransformer([
        ('num', StandardScaler(), num_clinical),
        ('cat', OneHotEncoder(handle_unknown='ignore'), cat_clinical)
    ])

    X_clinical_processed = clinical_preprocessor.fit_transform(X_clinical)

    # KMeans untuk 4 klaster
    kmeans_clinical = KMeans(n_clusters=4, random_state=123, n_init=10)
    ndf["clinical_cluster"] = kmeans_clinical.fit_predict(X_clinical_processed)

    # Profil setiap klaster
    cluster_summary = ndf.groupby("clinical_cluster")[clinical_features].agg({
        'cholesterol_ldl': 'mean',
        'triglycerides': 'mean',
        'cholesterol_hdl': 'mean',
        'blood_pressure_systolic': 'mean',
        'blood_pressure_diastolic': 'mean',
        'fasting_blood_sugar': 'mean',
        'EKG_results': lambda x: x.value_counts().index[0]
    })

    print("\n📊 Ringkasan Karakteristik Tiap Klaster Klinis:")
    print(cluster_summary)

    st.subheader("🩼 Klaster Gejala & Kondisi Klinis")

    # Manual mapping berdasarkan analisis cluster_summary
    # Anda bisa menyesuaikan setelah melihat data hasil di atas
    clinical_label_map = {
        0: "Hipertensif",
        1: "Dislipidemia",
        2: "Abnormal EKG",
        3: "Gula Darah Tinggi / Pre-diabetes"
    }

    ndf["clinical_label"] = ndf["clinical_cluster"].map(clinical_label_map)
    # PCA untuk reduksi dimensi
    pca_clinical = PCA(n_components=2)
    X_clinical_pca = pca_clinical.fit_transform(X_clinical_processed)

    # Visualisasi dengan Streamlit
    fig_clinical, ax_clinical = plt.subplots(figsize=(8, 6))
    sns.scatterplot(
        x=X_clinical_pca[:, 0],
        y=X_clinical_pca[:, 1],
        hue=ndf["clinical_label"],
        palette="tab10",
        ax=ax_clinical
    )

    ax_clinical.set_title("Klaster Gejala & Kondisi Klinis")
    ax_clinical.set_xlabel("PCA 1")
    ax_clinical.set_ylabel("PCA 2")
    ax_clinical.legend(title="Kondisi Klinis")
    st.pyplot(fig_clinical)
    st.write("""
    Klastering ini bertujuan untuk mengelompokkan individu berdasarkan kondisi kesehatan klinis seperti tekanan darah, kolesterol, gula darah, dan hasil EKG. Berikut adalah hasil interpretasi dari masing-masing klaster:

    Ringkasan Klaster Klinis:

    | **Label Klaster**             | **Ciri-Ciri Utama**                                                                 |
    |------------------------------|--------------------------------------------------------------------------------------|
    | 🟥 **Hipertensif**            | Memiliki tekanan darah tinggi, kadang disertai kolesterol LDL tinggi                |
    | 🟧 **Dislipidemia**           | Gangguan lemak darah (LDL dan trigliserida tinggi, HDL rendah)                      |
    | 🟨 **Abnormal EKG**           | Hasil EKG menunjukkan ketidaknormalan, walaupun indikator lainnya relatif stabil   |
    | 🟦 **Gula Darah Tinggi**      | Gula darah puasa tinggi, mengarah ke kondisi pre-diabetes atau diabetes awal       |


    Catatan:
    Label klaster ini **ditentukan secara manual berdasarkan karakteristik dominan** dari tiap kelompok setelah proses klastering. Artinya, klaster tidak berdasarkan diagnosis langsung, tetapi berdasarkan kesamaan pola data klinis.

    """)
    st.write("Ringkasan Karakteristik Tiap Klaster Klinis:")
    st.dataframe(cluster_summary)



# ===============================
# Halaman: Prediksi
# ===============================
elif page == "🔮 Prediksi":
    st.title("🔮 Prediksi Heart Attack")
    st.write("Masukkan data untuk memprediksi kemungkinan serangan jantung.")
    model = load("heart_attack_prediction_pipeline.joblib")

    # Input Form
    nama = st.text_input("Masukkan nama")
    age = st.number_input("Umur", min_value=1, max_value=120, value=30)
    gender = st.selectbox("Jenis Kelamin", ["Laki-laki", "Perempuan"])
    gender_encoded = 1 if gender == "Laki-laki" else 0

    cholesterol_level = st.slider("Total Kolesterol", 0, 300, 150)
    cholesterol_ldl = st.slider("LDL Kolesterol", 0, 300, 100)
    cholesterol_hdl = st.slider("HDL Kolesterol", 0, 150, 100)
    triglycerides = st.slider("Trigliserida", 0, 500, 100)
    blood_pressure_systolic = st.slider("Tekanan Darah Sistolik", 70,250, 120)
    blood_pressure_diastolic = st.slider("Tekanan Darah Diastolik",20, 150, 60)
    hypertension = st.selectbox("Hipertensi", ["Ya", "Tidak"])
    hypertension_encoded = 2 if hypertension == "Ya" else 0
    diabetes = st.selectbox("Diabetes", ["Ya", "Tidak"])
    diabetes_encoded = 1 if diabetes == "Ya" else 0
    smoking_status = st.selectbox("Merokok", ["Tidak Pernah", "Dulu", "Ya"])
    smoking_status_encoded = 1 if smoking_status == "Ya" else (1 if smoking_status == "Dulu" else 0)
    obesity = st.selectbox("Obesitas", ["Ya", "Tidak"])
    obesity_encoded = 1 if obesity == "Ya" else 0
    waist_circumference = st.slider("Lingkar Pinggang (cm)", 10, 200, 80)
    physical_activity = st.number_input("Aktivitas Fisik (jam/minggu)", min_value=0.0)
    previous_heart_disease = st.selectbox("Riwayat Penyakit Jantung", ["Pernah", "Tidak"])
    previous_heart_disease_encoded = 1 if previous_heart_disease == "Pernah" else 0
    family_history = st.selectbox("Riwayat Keluarga", ["Ada", "Tidak"])
    family_history_encoded = 1 if family_history == "Ada" else 0
    alcohol_consumption = st.selectbox("Konsumsi Alkohol", ["Ya", "Tidak"])
    alcohol_consumption_encoded = 1 if alcohol_consumption == "Ya" else 0
    fasting_blood_sugar = st.slider("Gula Darah Puasa (mg/dL)", 50, 250, 100)
    EKG_results = st.selectbox("Hasil EKG", ["Normal","Abnormal"])
    EKG_results_encoded = 1 if EKG_results == "Abnormal" else 0
    medication_usage = st.selectbox("Penggunaan Obat", ["Ya", "Tidak"])
    medication_usage_encoded = 1 if medication_usage == "Ya" else 0
    dietary_habits = st.selectbox("Pola Makan", ["Sehat", "Tidak Sehat"])
    dietary_habits_encoded = 1 if dietary_habits == "Sehat" else 0
    stress_level = st.slider("Tingkat Stres (1=rendah, 10=tinggi)", min_value=1, max_value=10)
    sleep_hours = st.number_input("Jam Tidur per Hari", min_value=0.0, max_value=24.0)
    air_pollution_exposure = st.selectbox("Paparan Polusi Udara", ["Rendah", "Sedang", "Tinggi"])
    air_pollution_exposure_encoded = 2 if air_pollution_exposure == "Tinggi" else (1 if air_pollution_exposure == "Sedang" else 0)

    if st.button("Prediksi"):
        input_data = np.array([[
            age, gender_encoded, cholesterol_level, cholesterol_ldl, cholesterol_hdl,
            triglycerides, blood_pressure_systolic, blood_pressure_diastolic,
            hypertension_encoded, diabetes_encoded, smoking_status_encoded, obesity_encoded,
            waist_circumference, physical_activity, previous_heart_disease_encoded,
            family_history_encoded, alcohol_consumption_encoded, fasting_blood_sugar,
            EKG_results_encoded, medication_usage_encoded, dietary_habits_encoded,
            stress_level, sleep_hours, air_pollution_exposure_encoded
        ]])

        prediction = model.predict(input_data)
        result =  f"{nama} 💔 Kamu Berisiko Terkena Serangan Jantung" if prediction[0] == 1 else  f"{nama} ❤️ Kamu Tidak Berisiko Terkena Serangan Jantung"
        st.subheader("Hasil Prediksi:")
        st.success(result)

# ===============================
# Halaman: Tentang Tim
# ===============================
elif page == "👥 About":
    st.title("👥 Tentang Tim")
    st.markdown("""
    Aplikasi ini dikembangkan oleh kelompok 6 mata kuliah Data mining, mahasiswa Matematika untuk keperluan tugas akhir.

    Dosen pengampu: Bp. M. Faris Al Hakim S.Pd., M.Cs

    **Anggota Kelompok:**
    """)

    # Menampilkan anggota tim dengan foto
    col1, col2 = st.columns(2)

    with col1:
        st.image('https://raw.githubusercontent.com/Onlygall/Heart-attack/main/image/najwa.jpg', width=150, caption="Najwa Rahma Puspita 
        -2304030042-")
        st.image('https://raw.githubusercontent.com/Onlygall/Heart-attack/main/image/hahaha%20gas%20melon%20hahaha%20(1).jpg', width=150, caption="Zulfa Fachirotul Maulida 
        -2304030061-")

    with col2:
        st.image('https://raw.githubusercontent.com/Onlygall/Heart-attack/main/image/Galeeh.jpg', width=150, caption="Galeh saputra -2304030053- ")
        st.image('https://raw.githubusercontent.com/Onlygall/Heart-attack/main/image/hahaha%20gas%20melon%20hahaha%20(1).jpg', width=150, caption="Wahida Arista Putri -2304030073-")



    st.markdown("---")
    st.markdown("# Terima kasih telah menggunakan aplikasi kami! ❤️")
